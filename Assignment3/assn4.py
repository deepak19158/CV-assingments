# -*- coding: utf-8 -*-
"""HW4_Workbook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ha3HiUQRQeIsOjgBaUZ2GyTCKeC73Ubb

## **CV HW4: Multi-object Tracking (MOT) with Detection**
**Detection**: YOLOv5, 
**Tracking**: Simple Online Realtime Tracking (SORT)

---

## **1. Unzip data folder**
"""

# Change the path according to your setup 
!unzip '/content/drive/MyDrive/hw4/sort-master.zip'
!unzip '/content/drive/MyDrive/hw4/KITTI_17_images.zip'

"""# **2. Install requirements**"""

!pip install -r sort-master/requirements.txt
!pip install cv
!pip install filterpy==1.1.0

from google.colab import drive
drive.mount('/content/drive')

"""# **3. Import libraries**"""

import torch
import torchvision
import cv2
import sys
import glob
sys.path.insert(0,'./sort-master/')
import matplotlib
from google.colab.patches import cv2_imshow
from collections import namedtuple, OrderedDict

"""# **4. Load YOLOv5 detector from torch hub**"""

model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained = True)
model.float()
model.eval()

"""# **5. Import SORT library**"""

from sort import *

"""#**6. Perform tracking with detection**"""

import os
import glob
import numpy as np
from google.colab import files

folder_dir = '/content/drive/MyDrive/hwunzip/KITTI_17_images'
folder_paths = sorted(glob.glob(os.path.join(folder_dir, '*.jpg')))

tracker = Sort()

#code for video output
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
image_size= (1280,720)
fps= 10
out = cv2.VideoWriter('output_video.mp4', fourcc, fps, image_size)

with open('output_file.txt', 'w') as f:

  for frame_idx,image_file in enumerate(folder_paths):    
    img = cv2.imread(image_file)

    # Run YOLOv5 on the image
    results = model(img)

    # Get detections for object classes of interest
    detections = []
    for i, obj in enumerate(results.xyxy[0]):
        if obj[5]==0:
            
            f.write(str(frame_idx+1)+',0,'+str(obj[0].item())+','+str(obj[1].item())+','+str(obj[2].item())+','+str(obj[3].item())+','+str(obj[4].item())+',-1,-1,-1')
            f.write('\n')
            detections.append([obj[0], obj[1], obj[2], obj[3], obj[4]])


    if len(detections) > 0:
        detections = np.array(detections)
        track_ids = tracker.update(detections)

        for track_id in track_ids:
            tid = track_id[4]
            track = track_id[0:4]
            bbox = np.array(track)
            cv2.rectangle(img, (int(bbox[0]), int(bbox[1])), (int(bbox[2]), int(bbox[3])), (0, 255, 0), 2)
            cv2.putText(img, f"ID: {tid}", (int(bbox[0]), int(bbox[1]) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    if img.shape[:2] != image_size:
        img = cv2.resize(img, image_size)
      
    out.write(img)
    # cv2_imshow(img)

  # out.release()
  files.download('output_file.txt')

"""# **7. Report Evaluation Metrics**"""

# Use the Track-Eval kit to report the complete set of performance and accuracy metrics
# Comment on and interpret MOTA and MOTP values

import os
import glob
import numpy as np
from google.colab import files

folder_dir = '/content/drive/MyDrive/hwunzip/KITTI_17_images'
folder_paths = sorted(glob.glob(os.path.join(folder_dir, '*.jpg')))

tracker = Sort()

#code for video output
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
image_size= (1280,720)
fps= 10
out = cv2.VideoWriter('output_video.mp4', fourcc, fps, image_size)

with open('output_file.txt', 'w') as f:

  for frame_idx,image_file in enumerate(folder_paths):    
    img = cv2.imread(image_file)

    # Run YOLOv5 on the image
    results = model(img)

    # Get detections for object classes of interest
    detections = []
    for i, obj in enumerate(results.xyxy[0]):
        if obj[5]==0:
          if(obj[4].item()>0.5):
            f.write(str(frame_idx+1)+',0,'+str(obj[0].item())+','+str(obj[1].item())+','+str(obj[2].item())+','+str(obj[3].item())+',1,-1,-1,-1')
          else:
            f.write(str(frame_idx+1)+',0,'+str(obj[0].item())+','+str(obj[1].item())+','+str(obj[2].item())+','+str(obj[3].item())+',0,-1,-1,-1')
          f.write('\n')
          detections.append([obj[0], obj[1], obj[2], obj[3], obj[4]])


    if len(detections) > 0:
        detections = np.array(detections)
        track_ids = tracker.update(detections)

        for track_id in track_ids:
            tid = track_id[4]
            track = track_id[0:4]
            bbox = np.array(track)
            cv2.rectangle(img, (int(bbox[0]), int(bbox[1])), (int(bbox[2]), int(bbox[3])), (0, 255, 0), 2)
            cv2.putText(img, f"ID: {tid}", (int(bbox[0]), int(bbox[1]) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    if img.shape[:2] != image_size:
        img = cv2.resize(img, image_size)
      
    out.write(img)
    # cv2_imshow(img)

  out.release()
  files.download('output_file.txt')